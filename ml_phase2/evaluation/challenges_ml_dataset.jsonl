{"id": "challenge_001", "content": "\n# RSA Challenge - Small Exponent\nn = 12345678901234567890123456789012345678901234567890123456789012345678901234567890\ne = 3\nc = 9876543210987654321098765432109876543210987654321098765432109876543210987654321\n\nprint(f\"n = {n}\")\nprint(f\"e = {e}\")\nprint(f\"c = {c}\")\nprint(\"Factor n to get the flag!\")\n            ", "label": "RSA", "repo": "ctf-challenges", "difficulty": "easy"}
{"id": "challenge_002", "content": "\n# Caesar Cipher Challenge\nciphertext = \"uryyb_pguq_vf_n_pnrfne_grfg\"\n\nprint(\"Encrypted message:\", ciphertext)\nprint(\"Hint: This is a Caesar cipher\")\nprint(\"Try different rotations to decrypt!\")\n            ", "label": "Classical", "repo": "crypto-basics", "difficulty": "easy"}
{"id": "challenge_003", "content": "\n# XOR Single Byte Challenge\nkey = 0x42\nencrypted = bytes([p ^ key for p in plaintext])\n\nprint(\"Encrypted flag (hex):\", encrypted.hex())\nprint(\"Hint: Single byte XOR key was used\")\nprint(\"Try all 256 possible keys!\")\n            ", "label": "XOR", "repo": "xor-challenges", "difficulty": "easy"}
{"id": "challenge_004", "content": "\n# Base64 Encoding Challenge\nimport base64\n\nencoded_message = \"ZmxhZ3tiYXNlNjRfaXNfbm90X2VuY3J5cHRpb259\"\n\nprint(\"Encoded message:\", encoded_message)\nprint(\"Hint: This is BASE64 encoded\")\nprint(\"Decode it to get the flag!\")\n            ", "label": "Encoding", "repo": "encoding-challenges", "difficulty": "easy"}
{"id": "challenge_005", "content": "\n# Hash Challenge - MD5 Cracking\nimport hashlib\n\ntarget_hash = \"5d41402abc4b2a76b9719d911017c592\"\nprint(f\"Target hash: {target_hash}\")\nprint(\"Hint: This is an MD5 hash of a simple word\")\nprint(\"Try common words or use a dictionary attack!\")\n            ", "label": "Hash", "repo": "hash-challenges", "difficulty": "medium"}
