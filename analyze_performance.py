#!/usr/bin/env python3
"""
An√°lisis detallado del rendimiento del agente
Identifica fortalezas y debilidades para mejorar
"""

import sys
from pathlib import Path
import json

# A√±adir src al path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def analyze_benchmark_results():
    """Analiza los resultados del √∫ltimo benchmark"""
    
    print("üîç An√°lisis de Rendimiento del Agente")
    print("="*60)
    
    # Buscar el reporte m√°s reciente
    reports = list(Path(".").glob("benchmark_report_*.json"))
    if not reports:
        print("‚ùå No se encontraron reportes de benchmark")
        print("   Ejecuta: python benchmark.py")
        return False
    
    latest_report = max(reports, key=lambda p: p.stat().st_mtime)
    
    try:
        with open(latest_report, 'r') as f:
            report = json.load(f)
        
        print(f"üìÑ Analizando: {latest_report.name}")
        print(f"üïê Timestamp: {report.get('timestamp', 'Unknown')}")
        
        # An√°lisis general
        total = report.get('total_challenges', 0)
        successful = report.get('successful_challenges', 0)
        success_rate = report.get('success_rate', 0)
        
        print(f"\nüéØ Rendimiento General:")
        print(f"   Desaf√≠os totales: {total}")
        print(f"   √âxitos: {successful}")
        print(f"   Tasa de √©xito: {success_rate:.1%}")
        
        # Clasificar rendimiento
        if success_rate >= 0.8:
            grade = "üèÜ EXCELENTE"
        elif success_rate >= 0.6:
            grade = "‚úÖ BUENO"
        elif success_rate >= 0.4:
            grade = "‚ö†Ô∏è  REGULAR"
        elif success_rate >= 0.2:
            grade = "‚ùå MALO"
        else:
            grade = "üí• CR√çTICO"
        
        print(f"   Calificaci√≥n: {grade}")
        
        # An√°lisis por tipo
        print(f"\nüìä An√°lisis por Tipo:")
        by_type = report.get('by_type', {})
        
        strengths = []
        weaknesses = []
        
        for crypto_type, stats in by_type.items():
            rate = stats.get('success_rate', 0)
            total_type = stats.get('total', 0)
            successful_type = stats.get('successful', 0)
            
            print(f"   {crypto_type}:")
            print(f"      Tasa: {rate:.1%} ({successful_type}/{total_type})")
            print(f"      Tiempo promedio: {stats.get('avg_time', 0):.2f}s")
            
            if rate >= 0.8:
                strengths.append(crypto_type)
            elif rate <= 0.2:
                weaknesses.append(crypto_type)
        
        # An√°lisis por dificultad
        print(f"\nüéöÔ∏è  An√°lisis por Dificultad:")
        by_difficulty = report.get('by_difficulty', {})
        
        for difficulty, stats in by_difficulty.items():
            rate = stats.get('success_rate', 0)
            total_diff = stats.get('total', 0)
            successful_diff = stats.get('successful', 0)
            
            print(f"   {difficulty}: {rate:.1%} ({successful_diff}/{total_diff})")
        
        # Recomendaciones
        print(f"\nüí° Recomendaciones:")
        
        if strengths:
            print(f"   üèÜ Fortalezas (mantener):")
            for strength in strengths:
                print(f"      - {strength}: El agente funciona bien aqu√≠")
        
        if weaknesses:
            print(f"   üîß Debilidades (mejorar):")
            for weakness in weaknesses:
                print(f"      - {weakness}: Necesita trabajo urgente")
                
                # Sugerencias espec√≠ficas
                if weakness == "RSA":
                    print(f"         * Verificar integraci√≥n con RsaCtfTool")
                    print(f"         * Mejorar extracci√≥n de par√°metros n, e, c")
                    print(f"         * A√±adir m√°s ataques RSA especializados")
                elif weakness == "XOR":
                    print(f"         * Mejorar detecci√≥n de datos hex")
                    print(f"         * A√±adir ataques XOR multi-byte")
                    print(f"         * Mejorar an√°lisis de frecuencias")
                elif weakness == "Classical":
                    print(f"         * A√±adir m√°s cifrados cl√°sicos")
                    print(f"         * Mejorar detecci√≥n de patrones")
        
        # Pr√≥ximos pasos
        print(f"\nüöÄ Pr√≥ximos Pasos para Fase 2.2:")
        
        if success_rate < 0.5:
            print(f"   1. üîß PRIORIDAD ALTA: Arreglar herramientas b√°sicas")
            print(f"      - Debuggear por qu√© fallan los ataques")
            print(f"      - Verificar integraci√≥n con RsaCtfTool")
            print(f"      - Mejorar extracci√≥n de par√°metros")
        
        print(f"   2. üìä Recopilar m√°s datos:")
        print(f"      - Ejecutar benchmark con m√°s desaf√≠os")
        print(f"      - A√±adir challenges de diferentes fuentes")
        print(f"      - Objetivo: 50+ desaf√≠os para entrenar ML")
        
        print(f"   3. ü§ñ Preparar para ML:")
        print(f"      - Implementar clasificador BERT")
        print(f"      - Entrenar con datos actuales")
        print(f"      - Comparar rendimiento pre/post ML")
        
        # An√°lisis detallado de fallos
        print(f"\nüîç An√°lisis de Fallos:")
        failed_challenges = [
            result for result in report.get('detailed_results', [])
            if not result.get('success', False)
        ]
        
        if failed_challenges:
            print(f"   Desaf√≠os fallidos: {len(failed_challenges)}")
            
            # Agrupar por tipo de error
            error_types = {}
            for challenge in failed_challenges:
                error = challenge.get('error', 'Sin error espec√≠fico')
                error_short = error[:50] + "..." if len(error) > 50 else error
                
                if error_short not in error_types:
                    error_types[error_short] = []
                error_types[error_short].append(challenge['name'])
            
            for error, challenges in error_types.items():
                print(f"   '{error}': {len(challenges)} desaf√≠os")
                for challenge in challenges[:3]:  # Mostrar solo primeros 3
                    print(f"      - {challenge}")
                if len(challenges) > 3:
                    print(f"      - ... y {len(challenges) - 3} m√°s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error analizando reporte: {e}")
        return False

def main():
    """Funci√≥n principal"""
    success = analyze_benchmark_results()
    
    if success:
        print(f"\n‚úÖ An√°lisis completado")
        print(f"üí° Usa estos insights para mejorar el agente en Fase 2.2")
    else:
        print(f"\n‚ùå An√°lisis fall√≥")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)